{
  "contract_name": "dao-abc-factory",
  "contract_version": "2.4.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Example Factory Implementation",
        "type": "object",
        "required": [
          "abc_factory"
        ],
        "properties": {
          "abc_factory": {
            "$ref": "#/definitions/InstantiateMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ClosedConfig": {
        "type": "object",
        "additionalProperties": false
      },
      "CommonsPhaseConfig": {
        "type": "object",
        "required": [
          "closed",
          "hatch",
          "open"
        ],
        "properties": {
          "closed": {
            "description": "The Closed phase where the Commons is closed to new members.",
            "allOf": [
              {
                "$ref": "#/definitions/ClosedConfig"
              }
            ]
          },
          "hatch": {
            "description": "The Hatch phase where initial contributors (Hatchers) participate in a hatch sale.",
            "allOf": [
              {
                "$ref": "#/definitions/HatchConfig"
              }
            ]
          },
          "open": {
            "description": "TODO Vest tokens after hatch phase The Vesting phase where tokens minted during the Hatch phase are locked (burning is disabled) to combat early speculation/arbitrage. pub vesting: VestingConfig, The Open phase where anyone can mint tokens by contributing the reserve token into the curve and becoming members of the Commons.",
            "allOf": [
              {
                "$ref": "#/definitions/OpenConfig"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CurveType": {
        "oneOf": [
          {
            "description": "Constant always returns `value * 10^-scale` as spot price",
            "type": "object",
            "required": [
              "constant"
            ],
            "properties": {
              "constant": {
                "type": "object",
                "required": [
                  "scale",
                  "value"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "value": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Linear returns `slope * 10^-scale * supply` as spot price",
            "type": "object",
            "required": [
              "linear"
            ],
            "properties": {
              "linear": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "SquareRoot returns `slope * 10^-scale * supply^0.5` as spot price",
            "type": "object",
            "required": [
              "square_root"
            ],
            "properties": {
              "square_root": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DenomUnit": {
        "description": "DenomUnit represents a struct that describes a given denomination unit of the basic token.",
        "type": "object",
        "required": [
          "aliases",
          "denom",
          "exponent"
        ],
        "properties": {
          "aliases": {
            "description": "aliases is a list of string aliases for the given denom",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denom": {
            "description": "denom represents the string name of the given denom unit (e.g uatom).",
            "type": "string"
          },
          "exponent": {
            "description": "exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 1^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "HatchConfig": {
        "type": "object",
        "required": [
          "contribution_limits",
          "entry_fee",
          "exit_fee",
          "initial_raise"
        ],
        "properties": {
          "contribution_limits": {
            "description": "The minimum and maximum contribution amounts (min, max) in the reserve token",
            "allOf": [
              {
                "$ref": "#/definitions/MinMax"
              }
            ]
          },
          "entry_fee": {
            "description": "The initial allocation (Î¸), percentage of the initial raise allocated to the Funding Pool",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "exit_fee": {
            "description": "Exit tax for the hatch phase",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "initial_raise": {
            "description": "The initial raise range (min, max) in the reserve token",
            "allOf": [
              {
                "$ref": "#/definitions/MinMax"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "InstantiateMsg": {
        "type": "object",
        "required": [
          "curve_type",
          "fees_recipient",
          "phase_config",
          "reserve",
          "supply",
          "token_issuer_code_id"
        ],
        "properties": {
          "curve_type": {
            "description": "Curve type for this contract",
            "allOf": [
              {
                "$ref": "#/definitions/CurveType"
              }
            ]
          },
          "fees_recipient": {
            "description": "The recipient for any fees collected from bonding curve operation",
            "type": "string"
          },
          "hatcher_allowlist": {
            "description": "TODO different ways of doing this, for example DAO members? Using a whitelist contract? Merkle tree? Hatcher allowlist",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "phase_config": {
            "description": "Hatch configuration information",
            "allOf": [
              {
                "$ref": "#/definitions/CommonsPhaseConfig"
              }
            ]
          },
          "reserve": {
            "description": "Reserve token information",
            "allOf": [
              {
                "$ref": "#/definitions/ReserveToken"
              }
            ]
          },
          "supply": {
            "description": "Supply token information",
            "allOf": [
              {
                "$ref": "#/definitions/SupplyToken"
              }
            ]
          },
          "token_issuer_code_id": {
            "description": "The code id of the cw-tokenfactory-issuer contract",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "MinMax": {
        "description": "Struct for minimium and maximum values",
        "type": "object",
        "required": [
          "max",
          "min"
        ],
        "properties": {
          "max": {
            "$ref": "#/definitions/Uint128"
          },
          "min": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "NewDenomMetadata": {
        "type": "object",
        "required": [
          "description",
          "display",
          "name",
          "symbol"
        ],
        "properties": {
          "additional_denom_units": {
            "description": "Used define additional units of the token (e.g. \"tiger\") These must have an exponent larger than 0.",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/DenomUnit"
            }
          },
          "description": {
            "description": "The description of the token",
            "type": "string"
          },
          "display": {
            "description": "The unit commonly used in communication (e.g. \"cat\")",
            "type": "string"
          },
          "name": {
            "description": "The name of the token (e.g. \"Cat Coin\")",
            "type": "string"
          },
          "symbol": {
            "description": "The ticker symbol of the token (e.g. \"CAT\")",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OpenConfig": {
        "type": "object",
        "required": [
          "entry_fee",
          "exit_fee"
        ],
        "properties": {
          "entry_fee": {
            "description": "Percentage of capital put into the Reserve Pool during the Open phase when buying from the curve.",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "exit_fee": {
            "description": "Exit taxation ratio",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ReserveToken": {
        "type": "object",
        "required": [
          "decimals",
          "denom"
        ],
        "properties": {
          "decimals": {
            "description": "Number of decimal places for the reserve token, needed for proper curve math. Same format as decimals above, eg. if it is uatom, where 1 unit is 10^-6 ATOM, use 6 here",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "denom": {
            "description": "Reserve token denom (only support native for now)",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SupplyToken": {
        "type": "object",
        "required": [
          "decimals",
          "subdenom"
        ],
        "properties": {
          "decimals": {
            "description": "Number of decimal places for the supply token, needed for proper curve math. Default for token factory is 6",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "max_supply": {
            "anyOf": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "null"
              }
            ]
          },
          "metadata": {
            "description": "Metadata for the supply token to create",
            "anyOf": [
              {
                "$ref": "#/definitions/NewDenomMetadata"
              },
              {
                "type": "null"
              }
            ]
          },
          "subdenom": {
            "description": "The denom to create for the supply token",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "info"
        ],
        "properties": {
          "info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "daos"
        ],
        "properties": {
          "daos": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "daos": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Addr",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Addr"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InfoResponse",
      "type": "object",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "$ref": "#/definitions/ContractVersion"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ContractVersion": {
          "type": "object",
          "required": [
            "contract",
            "version"
          ],
          "properties": {
            "contract": {
              "description": "contract is the crate name of the implementing contract, eg. `crate:cw20-base` we will use other prefixes for other languages, and their standard global namespacing",
              "type": "string"
            },
            "version": {
              "description": "version is any string that this implementation knows. It may be simple counter \"1\", \"2\". or semantic version on release tags \"v0.7.0\", or some custom feature flag list. the only code that needs to understand the version parsing is code that knows how to migrate from the given contract (and is tied to it's implementation somehow)",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
